Depliege de Laravel Sail con GitHub Action en VPS 

Desplegar un proyecto de Laravel utilizando Laravel Sail en un VPS a través de GitHub Actions es un proceso que implica
 configurar varios pasos de integración continua y despliegue continuo (CI/CD). Te daré una guía paso a paso de cómo hacerlo.
Requisitos Previos
    1. VPS Configurado: Asegúrate de tener un VPS en funcionamiento. En este ejemplo, utilizaremos una máquina con 
    Ubuntu 20.04, pero cualquier sistema similar debería funcionar.
    2. Instalación de Git: Verifica que Git esté instalado en tu VPS. Si no es así, instálalo con:
       sudo apt update
       sudo apt install git
    3. Acceso SSH: Asegúrate de tener acceso SSH a tu VPS, ya sea con un par de claves o un usuario y contraseña.
    4. Cuenta de GitHub: Asegúrate de tener un repositorio de GitHub con tu proyecto Laravel configurado.
    5. Instalación de Docker y Docker Compose en el VPS: Laravel Sail depende de Docker y Docker Compose. 
    Instálalos en el VPS si no están instalados.
        ◦ Docker:
          sudo apt update
          sudo apt install -y docker.io
          sudo systemctl enable --now docker
        ◦ Docker Compose:
          sudo apt install -y docker-compose
    6. GitHub Secrets: Para permitir que GitHub Actions se conecte a tu VPS, necesitarás configurar los secretos de 
    GitHub para las claves SSH o las credenciales de acceso.

Paso 1: Configuración del VPS para Despliegue
    1. Instalar Git y Clonar el Repositorio en el VPS:
        ◦ Accede a tu VPS a través de SSH. 
        ◦ Dirígete al directorio donde quieres que se despliegue el proyecto y clona tu repositorio de GitHub: 
          git clone git@github.com:tu_usuario/tu_repositorio.git
          cd tu_repositorio
    2. Configuración de Laravel Sail en el VPS: Si tu proyecto ya está utilizando Laravel Sail, deberías tener un 
    archivo docker-compose.yml en el proyecto. No es necesario hacer configuraciones adicionales en este archivo para 
    el despliegue, pero asegúrate de que esté correctamente configurado.
    3. Configurar Variables de Entorno: Asegúrate de que tu archivo .env esté correctamente configurado para producción.
     Puedes configurarlo con las variables adecuadas para la base de datos, correo, etc.
    4. Ejecutar Laravel Sail: Para probar que Laravel Sail funciona en tu VPS, puedes iniciar los contenedores de Sail con:
       ./vendor/bin/sail up -d
       Esto debería levantar los servicios necesarios para tu aplicación, como la base de datos y el servidor web.

Paso 2: Configuración de GitHub Actions
Ahora, vamos a crear un flujo de trabajo (workflow) en GitHub Actions para automatizar el despliegue en el VPS.
    1. Configurar las Claves SSH en GitHub: Necesitarás una clave SSH para autenticarte en tu VPS desde GitHub Actions.
        ◦ En tu VPS, genera un par de claves SSH:
          ssh-keygen -t rsa -b 4096 -C "tu_email@dominio.com" -f ~/.ssh/github_action
        ◦ Agrega la clave pública (~/.ssh/github_action.pub) al archivo ~/.ssh/authorized_keys en tu VPS para permitir 
        el acceso.
        ◦ Copia la clave privada (~/.ssh/github_action) y agrégala como un secreto en tu repositorio de GitHub. Para hacerlo:
            ▪ Ve a tu repositorio en GitHub. 
            ▪ Dirígete a Settings > Secrets > New repository secret. 
            ▪ Agrega un nuevo secreto llamado VPS_SSH_PRIVATE_KEY y pega el contenido de la clave privada. 
    2. Configurar el archivo de Workflow de GitHub Actions: Crea el archivo de flujo de trabajo en tu repositorio. 
    En el directorio raíz de tu proyecto, crea el archivo .github/workflows/deploy.yml.
       Aquí tienes un ejemplo de un archivo básico de flujo de trabajo para GitHub Actions:
       name: Deploy Laravel to VPS using Sail
       
       on:
         push:
           branches:
             - main  # O la rama que prefieras
       
       jobs:
         deploy:
           runs-on: ubuntu-latest
       
           steps:
             - name: Checkout Code
               uses: actions/checkout@v2
       
             - name: Set up SSH for VPS
               uses: webfactory/ssh-agent@v0.5.3
               with:
                 ssh-private-key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
       
             - name: SSH into VPS and deploy
               run: |
                 ssh -o StrictHostKeyChecking=no user@ip_del_vps << 'EOF'
                   cd /ruta/del/proyecto
                   git pull origin main
                   ./vendor/bin/sail down
                   ./vendor/bin/sail up -d
                 EOF
       Este archivo hace lo siguiente:
        ◦ Accede al repositorio: Se asegura de que siempre esté actualizado con el último commit de la rama main. 
        ◦ Configura SSH: Usa la clave privada configurada en los secretos de GitHub para conectarse a tu VPS. 
        ◦ Despliega la aplicación: Se conecta al VPS y ejecuta comandos para hacer un git pull, detener los contenedores
         de Sail y levantarlos de nuevo. 
    3. Configurar los Secrets: Asegúrate de que el secreto VPS_SSH_PRIVATE_KEY esté configurado correctamente en GitHub.

Paso 3: Verificación del Despliegue
    1. Pushea a GitHub: Cada vez que hagas un cambio y lo envíes (push) a la rama main, GitHub Actions ejecutará el flujo 
    de trabajo de despliegue.
    2. Revisa los Logs: Puedes verificar los logs de la ejecución del workflow en la pestaña Actions de tu repositorio en 
    GitHub.
    3. Verifica en tu VPS: Accede a la URL de tu VPS para verificar que la nueva versión del proyecto esté en producción.

Resumen
    1. Configura tu VPS para que tenga Docker y Docker Compose instalados. 
    2. Agrega el código de tu repositorio al VPS y asegúrate de que Laravel Sail funcione correctamente. 
    3. Configura GitHub Actions para conectarse a tu VPS utilizando claves SSH y automatizar el despliegue del proyecto. 
    4. Realiza un push a la rama main y GitHub Actions desplegará la nueva versión. 
¡Listo! Deberías tener un flujo de trabajo automático para desplegar tu proyecto Laravel utilizando Laravel Sail en tu VPS 
a través de GitHub Actions.
