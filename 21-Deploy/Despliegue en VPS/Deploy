Para desplegar tu proyecto de Laravel utilizando Docker en un VPS a través de GitHub Actions, los pasos a seguir son 
los siguientes:
Requisitos previos:
    1. VPS configurado: Asegúrate de que tu VPS esté configurado con Docker y Docker Compose. 
    2. Acceso SSH al VPS: Asegúrate de que tienes acceso SSH a tu VPS para que GitHub Actions pueda hacer el despliegue. 
    3. Repositorio en GitHub: Tu proyecto debe estar almacenado en un repositorio de GitHub. 
    4. Credenciales SSH: Necesitarás una clave SSH para autenticarte en el VPS desde GitHub Actions. 

Pasos a seguir:
1. # Configura tu VPS con Docker y Docker Compose
Asegúrate de que Docker y Docker Compose estén instalados en tu VPS. Aquí hay comandos básicos para instalar Docker y 
Docker Compose en un servidor basado en Ubuntu:

# Accede a tu VPS** vía SSH:
    1. Genera una clave SSH en tu máquina local si aún no tienes una: 
ssh-keygen -t rsa -b 4096 -C "tu_email@dominio.com"
    2. Copia la clave pública en el VPS (por ejemplo, en ~/.ssh/authorized_keys)
ssh usuario@ip_de_mi_vps

# Actualizar paquetes e instalar dependencias
sudo apt-get update
sudo apt-get install apt-transport-https ca-certificates curl software-properties-common

# Añadir la clave GPG de Docker
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

# Añadir repositorio de Docker
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

# Instalar Docker
sudo apt-get update
sudo apt-get install docker-ce

# Instalar Docker Compose
sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose

# Verifica que Docker y Docker Compose estén instalados
docker --version
docker-compose --version

2. # Sube el código fuente y las dependencias de tu proyecto (si no lo has hecho) Si aún no has subido el código 
     fuente de Laravel y sus dependencias (como .env, composer.json y el directorio vendor si lo tienes en tu .gitignore), 
     también debes asegurarte de subirlos a tu repositorio. Si el proyecto de Laravel está listo y tiene dependencias, 
     puedes ejecutar lo siguiente para subirlas:
       git add .
       git commit -m "Añadir código fuente y dependencias de Laravel"
       git push origin main

    **Sube el código al VPS** (por ejemplo, usando `git` o `scp`):
    ```bash cd /ruta/a/tu/proyecto
            git clone https://github.com/tu_usuario/tu_repositorio.git
    ```
    **Construye y ejecuta los contenedores** con Docker Compose:
    ```bash docker-compose up --build -d
            docker exec -it nombre-del-contenedor bash EJ: "docker exec -it appfixture-myapp-1 bash"
            Dentro hacemos un [php artisan migrate:fresh --seed]
    ```
    Esto iniciará los contenedores de Laravel, MariaDB y phpMyAdmin.

    **Accede a la aplicación** en tu VPS a través de la dirección IP del servidor y el puerto 8000:
    ```bash http://vps_ip:8000
    ```
    **Accede a phpMyAdmin** en el puerto 8001:
    ```bash http://vps_ip:8001
    ```

3. # Configura el flujo de trabajo en GitHub Actions
Ahora, vamos a crear un archivo de flujo de trabajo en GitHub Actions para automatizar el despliegue.
    1. Crea un archivo en tu repositorio en la ruta .github/workflows/deploy.yml, este archivo define el flujo de trabajo
###### deploy.yml --------------------------------------------------------------------------------------------------------
name: Deploy Laravel Application

on:
  push:
    branches:
      - main  # o la rama principal de tu proyecto
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      # 1. Check out el código
      - name: Checkout code
        uses: actions/checkout@v2

      # 2. Configurar PHP (para que el pipeline pueda ejecutar las pruebas de Laravel)
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'

      # 3. Instalar dependencias de PHP
      - name: Install dependencies
        run: |
          composer install --no-interaction --prefer-dist

      # 4. Instalar dependencias de Node.js
      - name: Install Node.js dependencies
        run: |
          npm install

      # 5. Ejecutar las pruebas de Laravel
      - name: Run tests
        run: |
          php artisan migrate --env=testing
          php artisan test

      # Job para desplegar en el VPS
  deploy:
    runs-on: ubuntu-22.04
    needs: test
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: SSH deploy to VPS
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: 22
          script: |
            cd /path/to/project
            git pull origin main
            docker-compose down
            docker-compose up --build -d
###### -----------------------------------------------------------------------------------------------------------------------------

    2. Configuración de GitHub Secrets
    Para permitir que GitHub Actions se conecte de manera segura a tu VPS mediante SSH, necesitas agregar tus credenciales
    como secretos en GitHub:
     ◦  Accede a tu repositorio en GitHub. 
     ◦  Ve a "Settings" -> "Secrets and Variables" -> "Actions" Haz clic en [New repository secret] y agrega cada uno de los secretos mencionados.
    # Name *
    # Secret *
    Esto estara en nuestro archivo deploy.yml
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
    - Añade los siguientes secretos: 
        ◦ secrets.VPS_HOST: La dirección IP de tu VPS. 
        ◦ secrets.VPS_USER: El usuario con el que accederás al VPS (por ejemplo, ubuntu o root). 
        ◦ secrets.SSH_PRIVATE_KEY: El contenido de tu clave privada SSH (la que se genera en tu máquina VPS). 

   **Explicación del pipeline:**
   - **Checkout del código:** Este paso obtiene el código de tu repositorio.
   - **Configuración de PHP:** Se configura la versión de PHP para tu proyecto Laravel.
   - **Instalación de dependencias:** Se instalan las dependencias de PHP mediante Composer.
   - **Ejecución de pruebas:** Se ejecutan los tests de Laravel utilizando PHPUnit.
   - **Despliegue:** Si los tests pasan correctamente, se conecta al VPS usando SSH y se hace un `git pull` para obtener los cambios, se reinician los contenedores de Docker con la nueva versión.
